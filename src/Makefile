#############################################################################
# Makefile for building: efis
# Generated by qmake (1.05a) (Qt 3.1.2) on: Sat Sep 17 12:44:41 2005
# Project:  efis.pro
# Template: app
# Command: $(QMAKE) -o Makefile efis.pro
#############################################################################

####### Compiler, tools and options

CC       = gcc
CXX      = g++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -Wall -W -O2 -g -pipe -march=i386 -mcpu=i686 -fno-use-cxa-atexit -fexceptions -D_REENTRANT  -DQT_NO_DEBUG -DQT_THREAD_SUPPORT
CXXFLAGS = -pipe -Wall -W -O2 -g -pipe -march=i386 -mcpu=i686 -fno-use-cxa-atexit -fexceptions -D_REENTRANT  -DQT_NO_DEBUG -DQT_THREAD_SUPPORT
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I$(QTDIR)/mkspecs/default -I. -I$(QTDIR)/include -I/usr/X11R6/include -I/usr/X11R6/include -I.ui/ -I.moc/
LINK     = g++
LFLAGS   = 
LIBS     = $(SUBLIBS) -L$(QTDIR)/lib -L/usr/X11R6/lib -L/usr/X11R6/lib -lqt-mt -lGLU -lGL -lXmu -lXext -lX11 -lm -lpthread
AR       = ar cqs
RANLIB   = 
MOC      = $(QTDIR)/bin/moc
UIC      = $(QTDIR)/bin/uic
QMAKE    = qmake
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY) -p
COPY_DIR = $(COPY) -pR
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = .obj/

####### Files

HEADERS = efis.h \
		pfd.h \
		hsi.h \
		differentiate.h \
		gps.h \
		shadinZ.h \
		ahrs.h \
		autopilot.h \
		display_interface.h \
		syntax_error.h \
		ahrs_xbow.h \
		comm_sl40.h \
		exceptions.h \
		nav.h \
		utilities.h \
		airspeed.h \
		compass.h \
		fad_fdatasystems.h \
		xpdr_sl70r.h \
		fpm.h \
		altitude.h \
		constants.h \
		gps_ff.h \
		serial.h \
		eis/eis.h \
		stamp_sensors.h
SOURCES = efis.cpp \
		main.cpp \
		pfd_asi.cpp \
		pfd.cpp \
		pfd_ah.cpp \
		pfd_alt.cpp \
		hsi.cpp \
		pfd_vsi.cpp \
		init_instruments.cpp \
		shadinZ.cpp \
		ahrs.cpp \
		differentiate.cpp \
		ahrs_xbow.cpp \
		nav.cpp \
		fad_fdatasystems.cpp \
		update_instruments.cpp \
		airspeed.cpp \
		gps.cpp \
		xpdr_sl70r.cpp \
		gps_ff.cpp \
		altitude.cpp \
		autopilot.cpp \
		serial.cpp \
		eis/eis.cpp \
		eis/eis_tach.cpp \
		eis/eis_map.cpp \
		eis/eis_oilpressure.cpp \
		eis/eis_oiltemp.cpp \
		stamp_sensors.cpp
OBJECTS = .obj/efis.o \
		.obj/main.o \
		.obj/pfd_asi.o \
		.obj/pfd.o \
		.obj/pfd_ah.o \
		.obj/pfd_alt.o \
		.obj/hsi.o \
		.obj/pfd_vsi.o \
		.obj/init_instruments.o \
		.obj/shadinZ.o \
		.obj/ahrs.o \
		.obj/differentiate.o \
		.obj/ahrs_xbow.o \
		.obj/nav.o \
		.obj/fad_fdatasystems.o \
		.obj/update_instruments.o \
		.obj/airspeed.o \
		.obj/gps.o \
		.obj/xpdr_sl70r.o \
		.obj/gps_ff.o \
		.obj/altitude.o \
		.obj/autopilot.o \
		.obj/serial.o \
		.obj/eis.o \
		.obj/eis_tach.o \
		.obj/eis_map.o \
		.obj/eis_oilpressure.o \
		.obj/eis_oiltemp.o \
		.obj/stamp_sensors.o
FORMS = 
UICDECLS = 
UICIMPLS = 
SRCMOC   = .moc/moc_efis.cpp \
		.moc/moc_pfd.cpp \
		.moc/moc_hsi.cpp \
		.moc/moc_eis.cpp
OBJMOC = .obj/moc_efis.o \
		.obj/moc_pfd.o \
		.obj/moc_hsi.o \
		.obj/moc_eis.o
DIST	   = efis.pro
QMAKE_TARGET = efis
DESTDIR  = 
TARGET   = efis

first: all
####### Implicit rules

.SUFFIXES: .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC) 
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(LIBS)

mocables: $(SRCMOC)

$(MOC): 
	( cd $(QTDIR)/src/moc ; $(MAKE) )

Makefile: efis.pro  $(QTDIR)/mkspecs/default/qmake.conf 
	$(QMAKE) -o Makefile efis.pro
qmake: 
	@$(QMAKE) -o Makefile efis.pro

dist: 
	@mkdir -p .obj/efis && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) .obj/efis/ && ( cd `dirname .obj/efis` && $(TAR) efis.tar efis && $(GZIP) efis.tar ) && $(MOVE) `dirname .obj/efis`/efis.tar.gz . && $(DEL_FILE) -r .obj/efis

mocclean:
	-$(DEL_FILE) $(OBJMOC)
	-$(DEL_FILE) $(SRCMOC)

uiclean:

yaccclean:
lexclean:
clean: mocclean
	-$(DEL_FILE) $(OBJECTS) 
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) $(TARGET)


FORCE:

####### Compile

.obj/efis.o: efis.cpp efis.h \
		pfd.h \
		hsi.h \
		eis/eis.h \
		stamp_sensors.h \
		constants.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/efis.o efis.cpp

.obj/main.o: main.cpp efis.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/main.o main.cpp

.obj/pfd_asi.o: pfd_asi.cpp pfd.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/pfd_asi.o pfd_asi.cpp

.obj/pfd.o: pfd.cpp pfd.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/pfd.o pfd.cpp

.obj/pfd_ah.o: pfd_ah.cpp pfd.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/pfd_ah.o pfd_ah.cpp

.obj/pfd_alt.o: pfd_alt.cpp pfd.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/pfd_alt.o pfd_alt.cpp

.obj/hsi.o: hsi.cpp hsi.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/hsi.o hsi.cpp

.obj/pfd_vsi.o: pfd_vsi.cpp pfd.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/pfd_vsi.o pfd_vsi.cpp

.obj/init_instruments.o: init_instruments.cpp utilities.h \
		constants.h \
		exceptions.h \
		ahrs_xplane.h \
		ahrs_cooked.h \
		airspeed_xplane.h \
		gps_xplane.h \
		altitude_xplane.h \
		compass_xplane.h \
		autopilot_xplane.h \
		nav_xplane.h \
		ahrs.h \
		syntax_error.h \
		airspeed.h \
		differentiate.h \
		gps.h \
		altitude.h \
		compass.h \
		autopilot.h \
		nav.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/init_instruments.o init_instruments.cpp

.obj/shadinZ.o: shadinZ.cpp shadinZ.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/shadinZ.o shadinZ.cpp

.obj/ahrs.o: ahrs.cpp constants.h \
		utilities.h \
		exceptions.h \
		ahrs.h \
		gps.h \
		compass.h \
		syntax_error.h \
		differentiate.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/ahrs.o ahrs.cpp

.obj/differentiate.o: differentiate.cpp differentiate.h \
		constants.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/differentiate.o differentiate.cpp

.obj/ahrs_xbow.o: ahrs_xbow.cpp constants.h \
		ahrs_xbow.h \
		ahrs.h \
		serial.h \
		syntax_error.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/ahrs_xbow.o ahrs_xbow.cpp

.obj/nav.o: nav.cpp exceptions.h \
		nav.h \
		differentiate.h \
		constants.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/nav.o nav.cpp

.obj/fad_fdatasystems.o: fad_fdatasystems.cpp exceptions.h \
		constants.h \
		fad_fdatasystems.h \
		shadinZ.h \
		serial.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/fad_fdatasystems.o fad_fdatasystems.cpp

.obj/update_instruments.o: update_instruments.cpp utilities.h \
		constants.h \
		exceptions.h \
		ahrs_xplane.h \
		ahrs_cooked.h \
		airspeed_xplane.h \
		gps_xplane.h \
		altitude_xplane.h \
		compass_xplane.h \
		autopilot_xplane.h \
		nav_xplane.h \
		efis.h \
		pfd.h \
		hsi.h \
		ahrs.h \
		syntax_error.h \
		airspeed.h \
		differentiate.h \
		gps.h \
		altitude.h \
		compass.h \
		autopilot.h \
		nav.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/update_instruments.o update_instruments.cpp

.obj/airspeed.o: airspeed.cpp exceptions.h \
		airspeed.h \
		syntax_error.h \
		differentiate.h \
		constants.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/airspeed.o airspeed.cpp

.obj/gps.o: gps.cpp exceptions.h \
		gps.h \
		differentiate.h \
		constants.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/gps.o gps.cpp

.obj/xpdr_sl70r.o: xpdr_sl70r.cpp exceptions.h \
		constants.h \
		xpdr_sl70r.h \
		serial.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/xpdr_sl70r.o xpdr_sl70r.cpp

.obj/gps_ff.o: gps_ff.cpp constants.h \
		gps_ff.h \
		serial.h \
		gps.h \
		differentiate.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/gps_ff.o gps_ff.cpp

.obj/altitude.o: altitude.cpp exceptions.h \
		altitude.h \
		differentiate.h \
		constants.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/altitude.o altitude.cpp

.obj/autopilot.o: autopilot.cpp constants.h \
		utilities.h \
		ahrs.h \
		altitude.h \
		airspeed.h \
		nav.h \
		autopilot.h \
		syntax_error.h \
		differentiate.h \
		exceptions.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/autopilot.o autopilot.cpp

.obj/serial.o: serial.cpp serial.h \
		exceptions.h \
		constants.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/serial.o serial.cpp

.obj/eis.o: eis/eis.cpp eis/eis.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/eis.o eis/eis.cpp

.obj/eis_tach.o: eis/eis_tach.cpp eis/eis.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/eis_tach.o eis/eis_tach.cpp

.obj/eis_map.o: eis/eis_map.cpp eis/eis.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/eis_map.o eis/eis_map.cpp

.obj/eis_oilpressure.o: eis/eis_oilpressure.cpp eis/eis.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/eis_oilpressure.o eis/eis_oilpressure.cpp

.obj/eis_oiltemp.o: eis/eis_oiltemp.cpp eis/eis.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/eis_oiltemp.o eis/eis_oiltemp.cpp

.obj/stamp_sensors.o: stamp_sensors.cpp stamp_sensors.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/stamp_sensors.o stamp_sensors.cpp

.obj/moc_efis.o: .moc/moc_efis.cpp efis.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_efis.o .moc/moc_efis.cpp

.obj/moc_pfd.o: .moc/moc_pfd.cpp pfd.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_pfd.o .moc/moc_pfd.cpp

.obj/moc_hsi.o: .moc/moc_hsi.cpp hsi.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_hsi.o .moc/moc_hsi.cpp

.obj/moc_eis.o: .moc/moc_eis.cpp eis/eis.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_eis.o .moc/moc_eis.cpp

.moc/moc_efis.cpp: $(MOC) efis.h
	$(MOC) efis.h -o .moc/moc_efis.cpp

.moc/moc_pfd.cpp: $(MOC) pfd.h
	$(MOC) pfd.h -o .moc/moc_pfd.cpp

.moc/moc_hsi.cpp: $(MOC) hsi.h
	$(MOC) hsi.h -o .moc/moc_hsi.cpp

.moc/moc_eis.cpp: $(MOC) eis/eis.h
	$(MOC) eis/eis.h -o .moc/moc_eis.cpp

####### Install

install: all 

uninstall: 

